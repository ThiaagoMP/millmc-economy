plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.7.10'
}

group = 'br.com.thiaago.millmc'
version = '1.0'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url = uri("https://repo.papermc.io/repository/maven-public/") }
    maven {
        name = 'CodeMC'
        url = 'https://repo.codemc.org/repository/maven-public/'
    }
    flatDir {
        dirs 'libs'
    }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
}

dependencies {
    // compileOnly 'com.destroystokyo.paper:paper-api:1.8.8-R0.1-SNAPSHOT'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    implementation files("libs/inventory-framework-2.5.4.jar")
    implementation 'com.github.SaiintBrisson.command-framework:bukkit:1.2.0'
    implementation 'io.github.bananapuncher714:nbteditor:7.18.3'

    implementation("org.jetbrains.exposed:exposed-core:$exposedVersion")
    implementation("org.jetbrains.exposed:exposed-dao:$exposedVersion")
    implementation("org.jetbrains.exposed:exposed-jdbc:$exposedVersion")
    implementation("org.jetbrains.exposed:exposed-java-time:$exposedVersion")

    compileOnly files("libs/MillMC-Core.jar")
    compileOnly 'org.spigotmc:spigot-api:1.8.8-R0.1-SNAPSHOT'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

jar {

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes(
                'Implementation-Title': 'MillMC-Economy',
                "Main-Class": "br.com.thiaago.millmc.economy.MillMCEconomy"
        )
    }
    destinationDirectory = file("C:\\Users\\thiaa\\Documents\\Programação\\MillMC\\plugins")
    archivesBaseName = 'MillMC-Economy'
    version = ""
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}